/**
 * picolibrary
 *
 * Copyright 2020-2021, Andrew Countryman <apcountryman@gmail.com> and the picolibrary
 * contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/**
 * \file
 * \brief picolibrary::Bit_Manipulation unit test program.
 */

#include <cstdint>

#include "gmock/gmock.h"
#include "gtest/gtest.h"
#include "picolibrary/bit_manipulation.h"

namespace {

using ::picolibrary::reflect;

} // namespace

/**
 * \brief Verify picolibrary::reflect() works properly with std::uint8_t input.
 */
TEST( reflect, uint8WorksProperly )
{
    struct {
        std::uint8_t value;
        std::uint8_t reflection;
    } const test_cases[]{
        // clang-format off

        { 0b00000000, 0b00000000 },
        { 0b11111111, 0b11111111 },

        { 0b00000001, 0b10000000 },
        { 0b00000010, 0b01000000 },
        { 0b00000100, 0b00100000 },
        { 0b00001000, 0b00010000 },
        { 0b00010000, 0b00001000 },
        { 0b00100000, 0b00000100 },
        { 0b01000000, 0b00000010 },
        { 0b10000000, 0b00000001 },

        { 0b00000011, 0b11000000 },
        { 0b00000111, 0b11100000 },
        { 0b00001111, 0b11110000 },
        { 0b00011111, 0b11111000 },
        { 0b00111111, 0b11111100 },
        { 0b01111111, 0b11111110 },

        { 0b11111110, 0b01111111 },
        { 0b11111100, 0b00111111 },
        { 0b11111000, 0b00011111 },
        { 0b11110000, 0b00001111 },
        { 0b11100000, 0b00000111 },
        { 0b11000000, 0b00000011 },

        // clang-format on
    };

    for ( auto const test_case : test_cases ) {
        EXPECT_EQ( reflect( test_case.value ), test_case.reflection );
    } // for
}

/**
 * \brief Verify picolibrary::reflect() works properly with std::uint16_t input.
 */
TEST( reflect, uint16WorksProperly )
{
    struct {
        std::uint16_t value;
        std::uint16_t reflection;
    } const test_cases[]{
        { 0b0000000000000000, 0b0000000000000000 },
        { 0b1111111111111111, 0b1111111111111111 },

        { 0b0000000000000001, 0b1000000000000000 },
        { 0b0000000000000010, 0b0100000000000000 },
        { 0b0000000000000100, 0b0010000000000000 },
        { 0b0000000000001000, 0b0001000000000000 },
        { 0b0000000000010000, 0b0000100000000000 },
        { 0b0000000000100000, 0b0000010000000000 },
        { 0b0000000001000000, 0b0000001000000000 },
        { 0b0000000010000000, 0b0000000100000000 },
        { 0b0000000100000000, 0b0000000010000000 },
        { 0b0000001000000000, 0b0000000001000000 },
        { 0b0000010000000000, 0b0000000000100000 },
        { 0b0000100000000000, 0b0000000000010000 },
        { 0b0001000000000000, 0b0000000000001000 },
        { 0b0010000000000000, 0b0000000000000100 },
        { 0b0100000000000000, 0b0000000000000010 },
        { 0b1000000000000000, 0b0000000000000001 },

        { 0b0000000000000011, 0b1100000000000000 },
        { 0b0000000000000111, 0b1110000000000000 },
        { 0b0000000000001111, 0b1111000000000000 },
        { 0b0000000000011111, 0b1111100000000000 },
        { 0b0000000000111111, 0b1111110000000000 },
        { 0b0000000001111111, 0b1111111000000000 },
        { 0b0000000011111111, 0b1111111100000000 },
        { 0b0000000111111111, 0b1111111110000000 },
        { 0b0000001111111111, 0b1111111111000000 },
        { 0b0000011111111111, 0b1111111111100000 },
        { 0b0000111111111111, 0b1111111111110000 },
        { 0b0001111111111111, 0b1111111111111000 },
        { 0b0011111111111111, 0b1111111111111100 },
        { 0b0111111111111111, 0b1111111111111110 },

        { 0b1111111111111110, 0b0111111111111111 },
        { 0b1111111111111100, 0b0011111111111111 },
        { 0b1111111111111000, 0b0001111111111111 },
        { 0b1111111111110000, 0b0000111111111111 },
        { 0b1111111111100000, 0b0000011111111111 },
        { 0b1111111111000000, 0b0000001111111111 },
        { 0b1111111110000000, 0b0000000111111111 },
        { 0b1111111100000000, 0b0000000011111111 },
        { 0b1111111000000000, 0b0000000001111111 },
        { 0b1111110000000000, 0b0000000000111111 },
        { 0b1111100000000000, 0b0000000000011111 },
        { 0b1111000000000000, 0b0000000000001111 },
        { 0b1110000000000000, 0b0000000000000111 },
        { 0b1100000000000000, 0b0000000000000011 },
    };

    for ( auto const test_case : test_cases ) {
        EXPECT_EQ( reflect( test_case.value ), test_case.reflection );
    } // for
}

/**
 * \brief Verify picolibrary::reflect() works properly with std::uint32_t input.
 */
TEST( reflect, uint32WorksProperly )
{
    struct {
        std::uint32_t value;
        std::uint32_t reflection;
    } const test_cases[]{
        { 0b00000000000000000000000000000000, 0b00000000000000000000000000000000 },
        { 0b11111111111111111111111111111111, 0b11111111111111111111111111111111 },

        { 0b00000000000000000000000000000001, 0b10000000000000000000000000000000 },
        { 0b00000000000000000000000000000010, 0b01000000000000000000000000000000 },
        { 0b00000000000000000000000000000100, 0b00100000000000000000000000000000 },
        { 0b00000000000000000000000000001000, 0b00010000000000000000000000000000 },
        { 0b00000000000000000000000000010000, 0b00001000000000000000000000000000 },
        { 0b00000000000000000000000000100000, 0b00000100000000000000000000000000 },
        { 0b00000000000000000000000001000000, 0b00000010000000000000000000000000 },
        { 0b00000000000000000000000010000000, 0b00000001000000000000000000000000 },
        { 0b00000000000000000000000100000000, 0b00000000100000000000000000000000 },
        { 0b00000000000000000000001000000000, 0b00000000010000000000000000000000 },
        { 0b00000000000000000000010000000000, 0b00000000001000000000000000000000 },
        { 0b00000000000000000000100000000000, 0b00000000000100000000000000000000 },
        { 0b00000000000000000001000000000000, 0b00000000000010000000000000000000 },
        { 0b00000000000000000010000000000000, 0b00000000000001000000000000000000 },
        { 0b00000000000000000100000000000000, 0b00000000000000100000000000000000 },
        { 0b00000000000000001000000000000000, 0b00000000000000010000000000000000 },
        { 0b00000000000000010000000000000000, 0b00000000000000001000000000000000 },
        { 0b00000000000000100000000000000000, 0b00000000000000000100000000000000 },
        { 0b00000000000001000000000000000000, 0b00000000000000000010000000000000 },
        { 0b00000000000010000000000000000000, 0b00000000000000000001000000000000 },
        { 0b00000000000100000000000000000000, 0b00000000000000000000100000000000 },
        { 0b00000000001000000000000000000000, 0b00000000000000000000010000000000 },
        { 0b00000000010000000000000000000000, 0b00000000000000000000001000000000 },
        { 0b00000000100000000000000000000000, 0b00000000000000000000000100000000 },
        { 0b00000001000000000000000000000000, 0b00000000000000000000000010000000 },
        { 0b00000010000000000000000000000000, 0b00000000000000000000000001000000 },
        { 0b00000100000000000000000000000000, 0b00000000000000000000000000100000 },
        { 0b00001000000000000000000000000000, 0b00000000000000000000000000010000 },
        { 0b00010000000000000000000000000000, 0b00000000000000000000000000001000 },
        { 0b00100000000000000000000000000000, 0b00000000000000000000000000000100 },
        { 0b01000000000000000000000000000000, 0b00000000000000000000000000000010 },
        { 0b10000000000000000000000000000000, 0b00000000000000000000000000000001 },

        { 0b00000000000000000000000000000011, 0b11000000000000000000000000000000 },
        { 0b00000000000000000000000000000111, 0b11100000000000000000000000000000 },
        { 0b00000000000000000000000000001111, 0b11110000000000000000000000000000 },
        { 0b00000000000000000000000000011111, 0b11111000000000000000000000000000 },
        { 0b00000000000000000000000000111111, 0b11111100000000000000000000000000 },
        { 0b00000000000000000000000001111111, 0b11111110000000000000000000000000 },
        { 0b00000000000000000000000011111111, 0b11111111000000000000000000000000 },
        { 0b00000000000000000000000111111111, 0b11111111100000000000000000000000 },
        { 0b00000000000000000000001111111111, 0b11111111110000000000000000000000 },
        { 0b00000000000000000000011111111111, 0b11111111111000000000000000000000 },
        { 0b00000000000000000000111111111111, 0b11111111111100000000000000000000 },
        { 0b00000000000000000001111111111111, 0b11111111111110000000000000000000 },
        { 0b00000000000000000011111111111111, 0b11111111111111000000000000000000 },
        { 0b00000000000000000111111111111111, 0b11111111111111100000000000000000 },
        { 0b00000000000000001111111111111111, 0b11111111111111110000000000000000 },
        { 0b00000000000000011111111111111111, 0b11111111111111111000000000000000 },
        { 0b00000000000000111111111111111111, 0b11111111111111111100000000000000 },
        { 0b00000000000001111111111111111111, 0b11111111111111111110000000000000 },
        { 0b00000000000011111111111111111111, 0b11111111111111111111000000000000 },
        { 0b00000000000111111111111111111111, 0b11111111111111111111100000000000 },
        { 0b00000000001111111111111111111111, 0b11111111111111111111110000000000 },
        { 0b00000000011111111111111111111111, 0b11111111111111111111111000000000 },
        { 0b00000000111111111111111111111111, 0b11111111111111111111111100000000 },
        { 0b00000001111111111111111111111111, 0b11111111111111111111111110000000 },
        { 0b00000011111111111111111111111111, 0b11111111111111111111111111000000 },
        { 0b00000111111111111111111111111111, 0b11111111111111111111111111100000 },
        { 0b00001111111111111111111111111111, 0b11111111111111111111111111110000 },
        { 0b00011111111111111111111111111111, 0b11111111111111111111111111111000 },
        { 0b00111111111111111111111111111111, 0b11111111111111111111111111111100 },
        { 0b01111111111111111111111111111111, 0b11111111111111111111111111111110 },

        { 0b11111111111111111111111111111110, 0b01111111111111111111111111111111 },
        { 0b11111111111111111111111111111100, 0b00111111111111111111111111111111 },
        { 0b11111111111111111111111111111000, 0b00011111111111111111111111111111 },
        { 0b11111111111111111111111111110000, 0b00001111111111111111111111111111 },
        { 0b11111111111111111111111111100000, 0b00000111111111111111111111111111 },
        { 0b11111111111111111111111111000000, 0b00000011111111111111111111111111 },
        { 0b11111111111111111111111110000000, 0b00000001111111111111111111111111 },
        { 0b11111111111111111111111100000000, 0b00000000111111111111111111111111 },
        { 0b11111111111111111111111000000000, 0b00000000011111111111111111111111 },
        { 0b11111111111111111111110000000000, 0b00000000001111111111111111111111 },
        { 0b11111111111111111111100000000000, 0b00000000000111111111111111111111 },
        { 0b11111111111111111111000000000000, 0b00000000000011111111111111111111 },
        { 0b11111111111111111110000000000000, 0b00000000000001111111111111111111 },
        { 0b11111111111111111100000000000000, 0b00000000000000111111111111111111 },
        { 0b11111111111111111000000000000000, 0b00000000000000011111111111111111 },
        { 0b11111111111111110000000000000000, 0b00000000000000001111111111111111 },
        { 0b11111111111111100000000000000000, 0b00000000000000000111111111111111 },
        { 0b11111111111111000000000000000000, 0b00000000000000000011111111111111 },
        { 0b11111111111110000000000000000000, 0b00000000000000000001111111111111 },
        { 0b11111111111100000000000000000000, 0b00000000000000000000111111111111 },
        { 0b11111111111000000000000000000000, 0b00000000000000000000011111111111 },
        { 0b11111111110000000000000000000000, 0b00000000000000000000001111111111 },
        { 0b11111111100000000000000000000000, 0b00000000000000000000000111111111 },
        { 0b11111111000000000000000000000000, 0b00000000000000000000000011111111 },
        { 0b11111110000000000000000000000000, 0b00000000000000000000000001111111 },
        { 0b11111100000000000000000000000000, 0b00000000000000000000000000111111 },
        { 0b11111000000000000000000000000000, 0b00000000000000000000000000011111 },
        { 0b11110000000000000000000000000000, 0b00000000000000000000000000001111 },
        { 0b11100000000000000000000000000000, 0b00000000000000000000000000000111 },
        { 0b11000000000000000000000000000000, 0b00000000000000000000000000000011 },
    };

    for ( auto const test_case : test_cases ) {
        EXPECT_EQ( reflect( test_case.value ), test_case.reflection );
    } // for
}

/**
 * \brief Execute the picolibrary::Bit_Manipulation unit tests.
 *
 * \param[in] argc The number of arguments to pass to testing::InitGoogleMock().
 * \param[in] argv The array  of arguments to pass to testing::InitGoogleMock().
 *
 * \return See Google Test's RUN_ALL_TESTS().
 */
int main( int argc, char * argv[] )
{
    ::testing::InitGoogleMock( &argc, argv );

    return RUN_ALL_TESTS();
}
