/**
 * picolibrary
 *
 * Copyright 2020-2023, Andrew Countryman <apcountryman@gmail.com> and the picolibrary
 * contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/**
 * \file
 * \brief picolibrary bit manipulation automated test program.
 */

#include <bitset>
#include <cstdint>
#include <ios>
#include <limits>
#include <ostream>

#include "gmock/gmock.h"
#include "gtest/gtest.h"
#include "picolibrary/bit_manipulation.h"

namespace {

using ::picolibrary::highest_bit_set;
using ::picolibrary::is_power_of_two;
using ::picolibrary::mask;
using ::picolibrary::reflect;
using ::testing::TestWithParam;
using ::testing::ValuesIn;

} // namespace

/**
 * \brief picolibrary::highest_bit_set() test case.
 *
 * \tparam T The type of unsigned integer the lookup will be performed on.
 */
template<typename T>
struct highestBitSet_Test_Case {
    /**
     * \brief The value whose highest bit set is to be looked up (assumed to be non-zero).
     */
    T value;

    /**
     * \brief Highest bit set in input.
     */
    std::uint_fast8_t highest_bit_set;
};

template<typename T>
auto operator<<( std::ostream & stream, highestBitSet_Test_Case<T> const & test_case )
    -> std::ostream &
{
    // clang-format off

    return stream << "{ "
                  << ".value = 0b" << std::bitset<std::numeric_limits<T>::digits>{ test_case.value }
                  << ", "
                  << ".highest_bit_set = " << static_cast<std::uint_fast16_t>( test_case.highest_bit_set )
                  << " }";

    // clang-format on
}

/**
 * \brief picolibrary::highest_bit_set<std::uint8_t>() test cases.
 */
highestBitSet_Test_Case<std::uint8_t> const highestBitSet8_TEST_CASES[]{
    // clang-format off

    { 0b00000001, 0 },
    { 0b00000010, 1 },
    { 0b00000100, 2 },
    { 0b00001000, 3 },
    { 0b00010000, 4 },
    { 0b00100000, 5 },
    { 0b01000000, 6 },
    { 0b10000000, 7 },

    { 0b00000001, 0 },
    { 0b00000011, 1 },
    { 0b00000111, 2 },
    { 0b00001111, 3 },
    { 0b00011111, 4 },
    { 0b00111111, 5 },
    { 0b01111111, 6 },
    { 0b11111111, 7 },

    { 0b00000110, 2 },
    { 0b00001100, 3 },
    { 0b00011101, 4 },
    { 0b00111010, 5 },
    { 0b01010110, 6 },
    { 0b10111000, 7 },

    // clang-format on
};

/**
 * \brief picolibrary::highest_bit_set<std::uint8_t>() test fixture.
 */
class highestBitSet8 : public TestWithParam<highestBitSet_Test_Case<std::uint8_t>> {
};

INSTANTIATE_TEST_SUITE_P( testCases, highestBitSet8, ValuesIn( highestBitSet8_TEST_CASES ) );

/**
 * \brief Verify picolibrary::highest_bit_set<std::uint8_t>() works properly.
 */
TEST_P( highestBitSet8, worksProperly )
{
    auto const test_case = GetParam();

    ASSERT_EQ( highest_bit_set( test_case.value ), test_case.highest_bit_set );
}

/**
 * \brief picolibrary::highest_bit_set<std::uint16_t>() test cases.
 */
highestBitSet_Test_Case<std::uint16_t> const highestBitSet16_TEST_CASES[]{
    // clang-format off

    { 0b0000000000000001,  0 },
    { 0b0000000000000010,  1 },
    { 0b0000000000000100,  2 },
    { 0b0000000000001000,  3 },
    { 0b0000000000010000,  4 },
    { 0b0000000000100000,  5 },
    { 0b0000000001000000,  6 },
    { 0b0000000010000000,  7 },
    { 0b0000000100000000,  8 },
    { 0b0000001000000000,  9 },
    { 0b0000010000000000, 10 },
    { 0b0000100000000000, 11 },
    { 0b0001000000000000, 12 },
    { 0b0010000000000000, 13 },
    { 0b0100000000000000, 14 },
    { 0b1000000000000000, 15 },

    { 0b0000000000000001,  0 },
    { 0b0000000000000011,  1 },
    { 0b0000000000000111,  2 },
    { 0b0000000000001111,  3 },
    { 0b0000000000011111,  4 },
    { 0b0000000000111111,  5 },
    { 0b0000000001111111,  6 },
    { 0b0000000011111111,  7 },
    { 0b0000000111111111,  8 },
    { 0b0000001111111111,  9 },
    { 0b0000011111111111, 10 },
    { 0b0000111111111111, 11 },
    { 0b0001111111111111, 12 },
    { 0b0011111111111111, 13 },
    { 0b0111111111111111, 14 },
    { 0b1111111111111111, 15 },

    { 0b0000000000000110,  2 },
    { 0b0000000000001100,  3 },
    { 0b0000000000011101,  4 },
    { 0b0000000000111010,  5 },
    { 0b0000000001010110,  6 },
    { 0b0000000010111000,  7 },
    { 0b0000000111001111,  8 },
    { 0b0000001100001010,  9 },
    { 0b0000011000100010, 10 },
    { 0b0000110000101101, 11 },
    { 0b0001101010101011, 12 },
    { 0b0010000000100010, 13 },
    { 0b0110100010001110, 14 },
    { 0b1010010001100100, 15 },

    // clang-format on
};

/**
 * \brief picolibrary::highest_bit_set<std::uint16_t>() test fixture.
 */
class highestBitSet16 : public TestWithParam<highestBitSet_Test_Case<std::uint16_t>> {
};

INSTANTIATE_TEST_SUITE_P( testCases, highestBitSet16, ValuesIn( highestBitSet16_TEST_CASES ) );

/**
 * \brief Verify picolibrary::highest_bit_set<std::uint16_t>() works properly.
 */
TEST_P( highestBitSet16, worksProperly )
{
    auto const test_case = GetParam();

    ASSERT_EQ( highest_bit_set( test_case.value ), test_case.highest_bit_set );
}

/**
 * \brief picolibrary::highest_bit_set<std::uint32_t>() test cases.
 */
highestBitSet_Test_Case<std::uint32_t> const highestBitSet32_TEST_CASES[]{
    // clang-format off

    { 0b00000000000000000000000000000001,  0 },
    { 0b00000000000000000000000000000010,  1 },
    { 0b00000000000000000000000000000100,  2 },
    { 0b00000000000000000000000000001000,  3 },
    { 0b00000000000000000000000000010000,  4 },
    { 0b00000000000000000000000000100000,  5 },
    { 0b00000000000000000000000001000000,  6 },
    { 0b00000000000000000000000010000000,  7 },
    { 0b00000000000000000000000100000000,  8 },
    { 0b00000000000000000000001000000000,  9 },
    { 0b00000000000000000000010000000000, 10 },
    { 0b00000000000000000000100000000000, 11 },
    { 0b00000000000000000001000000000000, 12 },
    { 0b00000000000000000010000000000000, 13 },
    { 0b00000000000000000100000000000000, 14 },
    { 0b00000000000000001000000000000000, 15 },
    { 0b00000000000000010000000000000000, 16 },
    { 0b00000000000000100000000000000000, 17 },
    { 0b00000000000001000000000000000000, 18 },
    { 0b00000000000010000000000000000000, 19 },
    { 0b00000000000100000000000000000000, 20 },
    { 0b00000000001000000000000000000000, 21 },
    { 0b00000000010000000000000000000000, 22 },
    { 0b00000000100000000000000000000000, 23 },
    { 0b00000001000000000000000000000000, 24 },
    { 0b00000010000000000000000000000000, 25 },
    { 0b00000100000000000000000000000000, 26 },
    { 0b00001000000000000000000000000000, 27 },
    { 0b00010000000000000000000000000000, 28 },
    { 0b00100000000000000000000000000000, 29 },
    { 0b01000000000000000000000000000000, 30 },
    { 0b10000000000000000000000000000000, 31 },

    { 0b00000000000000000000000000000001,  0 },
    { 0b00000000000000000000000000000011,  1 },
    { 0b00000000000000000000000000000111,  2 },
    { 0b00000000000000000000000000001111,  3 },
    { 0b00000000000000000000000000011111,  4 },
    { 0b00000000000000000000000000111111,  5 },
    { 0b00000000000000000000000001111111,  6 },
    { 0b00000000000000000000000011111111,  7 },
    { 0b00000000000000000000000111111111,  8 },
    { 0b00000000000000000000001111111111,  9 },
    { 0b00000000000000000000011111111111, 10 },
    { 0b00000000000000000000111111111111, 11 },
    { 0b00000000000000000001111111111111, 12 },
    { 0b00000000000000000011111111111111, 13 },
    { 0b00000000000000000111111111111111, 14 },
    { 0b00000000000000001111111111111111, 15 },
    { 0b00000000000000011111111111111111, 16 },
    { 0b00000000000000111111111111111111, 17 },
    { 0b00000000000001111111111111111111, 18 },
    { 0b00000000000011111111111111111111, 19 },
    { 0b00000000000111111111111111111111, 20 },
    { 0b00000000001111111111111111111111, 21 },
    { 0b00000000011111111111111111111111, 22 },
    { 0b00000000111111111111111111111111, 23 },
    { 0b00000001111111111111111111111111, 24 },
    { 0b00000011111111111111111111111111, 25 },
    { 0b00000111111111111111111111111111, 26 },
    { 0b00001111111111111111111111111111, 27 },
    { 0b00011111111111111111111111111111, 28 },
    { 0b00111111111111111111111111111111, 29 },
    { 0b01111111111111111111111111111111, 30 },
    { 0b11111111111111111111111111111111, 31 },

    { 0b00000000000000000000000000000110,  2 },
    { 0b00000000000000000000000000001100,  3 },
    { 0b00000000000000000000000000011101,  4 },
    { 0b00000000000000000000000000111010,  5 },
    { 0b00000000000000000000000001010110,  6 },
    { 0b00000000000000000000000010111000,  7 },
    { 0b00000000000000000000000111001111,  8 },
    { 0b00000000000000000000001100001010,  9 },
    { 0b00000000000000000000011000100010, 10 },
    { 0b00000000000000000000110000101101, 11 },
    { 0b00000000000000000001101010101011, 12 },
    { 0b00000000000000000010000000100010, 13 },
    { 0b00000000000000000110100010001110, 14 },
    { 0b00000000000000001010010001100100, 15 },
    { 0b00000000000000010111000001011110, 16 },
    { 0b00000000000000111101111011010000, 17 },
    { 0b00000000000001011000100010010011, 18 },
    { 0b00000000000011110011110000011110, 19 },
    { 0b00000000000100111100110101011111, 20 },
    { 0b00000000001110011010101100101011, 21 },
    { 0b00000000010011100011000000010111, 22 },
    { 0b00000000100001101000111111111000, 23 },
    { 0b00000001110111000101110101110110, 24 },
    { 0b00000011010101101001010010100011, 25 },
    { 0b00000101100110001011010011001001, 26 },
    { 0b00001111111011011011010111010101, 27 },
    { 0b00011000000110101110000101010101, 28 },
    { 0b00111100111100011110010111001110, 29 },
    { 0b01101110010000101011010001110110, 30 },
    { 0b10010010100100101000001000111010, 31 },

    // clang-format on
};

/**
 * \brief picolibrary::highest_bit_set<std::uint32_t>() test fixture.
 */
class highestBitSet32 : public TestWithParam<highestBitSet_Test_Case<std::uint32_t>> {
};

INSTANTIATE_TEST_SUITE_P( testCases, highestBitSet32, ValuesIn( highestBitSet32_TEST_CASES ) );

/**
 * \brief Verify picolibrary::highest_bit_set<std::uint32_t>() works properly.
 */
TEST_P( highestBitSet32, worksProperly )
{
    auto const test_case = GetParam();

    ASSERT_EQ( highest_bit_set( test_case.value ), test_case.highest_bit_set );
}

/**
 * \brief picolibrary::mask() test case.
 *
 * \tparam T The type of unsigned integer to use for the mask.
 */
template<typename T>
struct mask_Test_Case {
    /**
     * \brief The size of the mask (number of masked bits).
     */
    std::uint_fast8_t size;

    /**
     * \brief The bit position of the least significant masked bit.
     */
    std::uint_fast8_t bit;

    /**
     * \brief The created bit mask.
     */
    T mask;
};

template<typename T>
auto operator<<( std::ostream & stream, mask_Test_Case<T> const & test_case ) -> std::ostream &
{
    // clang-format off

    return stream << "{ "
                  << ".size = " << static_cast<std::uint_fast16_t>( test_case.size )
                  << ", "
                  << ".bit = " << static_cast<std::uint_fast16_t>( test_case.bit )
                  << ", "
                  << ".mask = 0b" << std::bitset<std::numeric_limits<T>::digits>{ test_case.mask }
                  << " }";

    // clang-format on
}

/**
 * \brief picolibrary::mask<std::uint8_t>() test cases.
 */
mask_Test_Case<std::uint8_t> const mask8_TEST_CASES[]{
    // clang-format off

    { 0, 0, 0b00000000 },
    { 0, 1, 0b00000000 },
    { 0, 2, 0b00000000 },
    { 0, 3, 0b00000000 },
    { 0, 4, 0b00000000 },
    { 0, 5, 0b00000000 },
    { 0, 6, 0b00000000 },
    { 0, 7, 0b00000000 },

    { 1, 0, 0b00000001 },
    { 1, 1, 0b00000010 },
    { 1, 2, 0b00000100 },
    { 1, 3, 0b00001000 },
    { 1, 4, 0b00010000 },
    { 1, 5, 0b00100000 },
    { 1, 6, 0b01000000 },
    { 1, 7, 0b10000000 },

    { 2, 0, 0b00000011 },
    { 2, 1, 0b00000110 },
    { 2, 2, 0b00001100 },
    { 2, 3, 0b00011000 },
    { 2, 4, 0b00110000 },
    { 2, 5, 0b01100000 },
    { 2, 6, 0b11000000 },

    { 3, 0, 0b00000111 },
    { 3, 1, 0b00001110 },
    { 3, 2, 0b00011100 },
    { 3, 3, 0b00111000 },
    { 3, 4, 0b01110000 },
    { 3, 5, 0b11100000 },

    { 4, 0, 0b00001111 },
    { 4, 1, 0b00011110 },
    { 4, 2, 0b00111100 },
    { 4, 3, 0b01111000 },
    { 4, 4, 0b11110000 },

    { 5, 0, 0b00011111 },
    { 5, 1, 0b00111110 },
    { 5, 2, 0b01111100 },
    { 5, 3, 0b11111000 },

    { 6, 0, 0b00111111 },
    { 6, 1, 0b01111110 },
    { 6, 2, 0b11111100 },

    { 7, 0, 0b01111111 },
    { 7, 1, 0b11111110 },

    { 8, 0, 0b11111111 },

    // clang-format on
};

/**
 * \brief picolibrary::mask<std::uint8_t>() test fixture.
 */
class mask8 : public TestWithParam<mask_Test_Case<std::uint8_t>> {
};

INSTANTIATE_TEST_SUITE_P( testCases, mask8, ValuesIn( mask8_TEST_CASES ) );

/**
 * \brief Verify picolibrary::mask<std::uint8_t>() works properly.
 */
TEST_P( mask8, worksProperly )
{
    auto const test_case = GetParam();

    ASSERT_EQ( mask<std::uint8_t>( test_case.size, test_case.bit ), test_case.mask );
}

/**
 * \brief picolibrary::mask<std::uint16_t>() test cases.
 */
mask_Test_Case<std::uint16_t> const mask16_TEST_CASES[]{
    // clang-format off

    {  0,  0, 0b0000000000000000 },
    {  0,  1, 0b0000000000000000 },
    {  0,  2, 0b0000000000000000 },
    {  0,  3, 0b0000000000000000 },
    {  0,  4, 0b0000000000000000 },
    {  0,  5, 0b0000000000000000 },
    {  0,  6, 0b0000000000000000 },
    {  0,  7, 0b0000000000000000 },
    {  0,  8, 0b0000000000000000 },
    {  0,  9, 0b0000000000000000 },
    {  0, 10, 0b0000000000000000 },
    {  0, 11, 0b0000000000000000 },
    {  0, 12, 0b0000000000000000 },
    {  0, 13, 0b0000000000000000 },
    {  0, 14, 0b0000000000000000 },
    {  0, 15, 0b0000000000000000 },

    {  1,  0, 0b0000000000000001 },
    {  1,  1, 0b0000000000000010 },
    {  1,  2, 0b0000000000000100 },
    {  1,  3, 0b0000000000001000 },
    {  1,  4, 0b0000000000010000 },
    {  1,  5, 0b0000000000100000 },
    {  1,  6, 0b0000000001000000 },
    {  1,  7, 0b0000000010000000 },
    {  1,  8, 0b0000000100000000 },
    {  1,  9, 0b0000001000000000 },
    {  1, 10, 0b0000010000000000 },
    {  1, 11, 0b0000100000000000 },
    {  1, 12, 0b0001000000000000 },
    {  1, 13, 0b0010000000000000 },
    {  1, 14, 0b0100000000000000 },
    {  1, 15, 0b1000000000000000 },

    {  2,  0, 0b0000000000000011 },
    {  2,  1, 0b0000000000000110 },
    {  2,  2, 0b0000000000001100 },
    {  2,  3, 0b0000000000011000 },
    {  2,  4, 0b0000000000110000 },
    {  2,  5, 0b0000000001100000 },
    {  2,  6, 0b0000000011000000 },
    {  2,  7, 0b0000000110000000 },
    {  2,  8, 0b0000001100000000 },
    {  2,  9, 0b0000011000000000 },
    {  2, 10, 0b0000110000000000 },
    {  2, 11, 0b0001100000000000 },
    {  2, 12, 0b0011000000000000 },
    {  2, 13, 0b0110000000000000 },
    {  2, 14, 0b1100000000000000 },

    {  3,  0, 0b0000000000000111 },
    {  3,  1, 0b0000000000001110 },
    {  3,  2, 0b0000000000011100 },
    {  3,  3, 0b0000000000111000 },
    {  3,  4, 0b0000000001110000 },
    {  3,  5, 0b0000000011100000 },
    {  3,  6, 0b0000000111000000 },
    {  3,  7, 0b0000001110000000 },
    {  3,  8, 0b0000011100000000 },
    {  3,  9, 0b0000111000000000 },
    {  3, 10, 0b0001110000000000 },
    {  3, 11, 0b0011100000000000 },
    {  3, 12, 0b0111000000000000 },
    {  3, 13, 0b1110000000000000 },

    {  4,  0, 0b0000000000001111 },
    {  4,  1, 0b0000000000011110 },
    {  4,  2, 0b0000000000111100 },
    {  4,  3, 0b0000000001111000 },
    {  4,  4, 0b0000000011110000 },
    {  4,  5, 0b0000000111100000 },
    {  4,  6, 0b0000001111000000 },
    {  4,  7, 0b0000011110000000 },
    {  4,  8, 0b0000111100000000 },
    {  4,  9, 0b0001111000000000 },
    {  4, 10, 0b0011110000000000 },
    {  4, 11, 0b0111100000000000 },
    {  4, 12, 0b1111000000000000 },

    {  5,  0, 0b0000000000011111 },
    {  5,  1, 0b0000000000111110 },
    {  5,  2, 0b0000000001111100 },
    {  5,  3, 0b0000000011111000 },
    {  5,  4, 0b0000000111110000 },
    {  5,  5, 0b0000001111100000 },
    {  5,  6, 0b0000011111000000 },
    {  5,  7, 0b0000111110000000 },
    {  5,  8, 0b0001111100000000 },
    {  5,  9, 0b0011111000000000 },
    {  5, 10, 0b0111110000000000 },
    {  5, 11, 0b1111100000000000 },

    {  6,  0, 0b0000000000111111 },
    {  6,  1, 0b0000000001111110 },
    {  6,  2, 0b0000000011111100 },
    {  6,  3, 0b0000000111111000 },
    {  6,  4, 0b0000001111110000 },
    {  6,  5, 0b0000011111100000 },
    {  6,  6, 0b0000111111000000 },
    {  6,  7, 0b0001111110000000 },
    {  6,  8, 0b0011111100000000 },
    {  6,  9, 0b0111111000000000 },
    {  6, 10, 0b1111110000000000 },

    {  7,  0, 0b0000000001111111 },
    {  7,  1, 0b0000000011111110 },
    {  7,  2, 0b0000000111111100 },
    {  7,  3, 0b0000001111111000 },
    {  7,  4, 0b0000011111110000 },
    {  7,  5, 0b0000111111100000 },
    {  7,  6, 0b0001111111000000 },
    {  7,  7, 0b0011111110000000 },
    {  7,  8, 0b0111111100000000 },
    {  7,  9, 0b1111111000000000 },

    {  8,  0, 0b0000000011111111 },
    {  8,  1, 0b0000000111111110 },
    {  8,  2, 0b0000001111111100 },
    {  8,  3, 0b0000011111111000 },
    {  8,  4, 0b0000111111110000 },
    {  8,  5, 0b0001111111100000 },
    {  8,  6, 0b0011111111000000 },
    {  8,  7, 0b0111111110000000 },
    {  8,  8, 0b1111111100000000 },

    {  9,  0, 0b0000000111111111 },
    {  9,  1, 0b0000001111111110 },
    {  9,  2, 0b0000011111111100 },
    {  9,  3, 0b0000111111111000 },
    {  9,  4, 0b0001111111110000 },
    {  9,  5, 0b0011111111100000 },
    {  9,  6, 0b0111111111000000 },
    {  9,  7, 0b1111111110000000 },

    { 10,  0, 0b0000001111111111 },
    { 10,  1, 0b0000011111111110 },
    { 10,  2, 0b0000111111111100 },
    { 10,  3, 0b0001111111111000 },
    { 10,  4, 0b0011111111110000 },
    { 10,  5, 0b0111111111100000 },
    { 10,  6, 0b1111111111000000 },

    { 11,  0, 0b0000011111111111 },
    { 11,  1, 0b0000111111111110 },
    { 11,  2, 0b0001111111111100 },
    { 11,  3, 0b0011111111111000 },
    { 11,  4, 0b0111111111110000 },
    { 11,  5, 0b1111111111100000 },

    { 12,  0, 0b0000111111111111 },
    { 12,  1, 0b0001111111111110 },
    { 12,  2, 0b0011111111111100 },
    { 12,  3, 0b0111111111111000 },
    { 12,  4, 0b1111111111110000 },

    { 13,  0, 0b0001111111111111 },
    { 13,  1, 0b0011111111111110 },
    { 13,  2, 0b0111111111111100 },
    { 13,  3, 0b1111111111111000 },

    { 14,  0, 0b0011111111111111 },
    { 14,  1, 0b0111111111111110 },
    { 14,  2, 0b1111111111111100 },

    { 15,  0, 0b0111111111111111 },
    { 15,  1, 0b1111111111111110 },

    { 16,  0, 0b1111111111111111 },

    // clang-format on
};

/**
 * \brief picolibrary::mask<std::uint16_t>() test fixture.
 */
class mask16 : public TestWithParam<mask_Test_Case<std::uint16_t>> {
};

INSTANTIATE_TEST_SUITE_P( testCases, mask16, ValuesIn( mask16_TEST_CASES ) );

/**
 * \brief Verify picolibrary::mask<std::uint16_t>() works properly.
 */
TEST_P( mask16, worksProperly )
{
    auto const test_case = GetParam();

    ASSERT_EQ( mask<std::uint16_t>( test_case.size, test_case.bit ), test_case.mask );
}

/**
 * \brief picolibrary::mask<std::uint32_t>() test cases.
 */
mask_Test_Case<std::uint32_t> const mask32_TEST_CASES[]{
    // clang-format off

    {  0,  0, 0b00000000000000000000000000000000 },
    {  0,  1, 0b00000000000000000000000000000000 },
    {  0,  2, 0b00000000000000000000000000000000 },
    {  0,  3, 0b00000000000000000000000000000000 },
    {  0,  4, 0b00000000000000000000000000000000 },
    {  0,  5, 0b00000000000000000000000000000000 },
    {  0,  6, 0b00000000000000000000000000000000 },
    {  0,  7, 0b00000000000000000000000000000000 },
    {  0,  8, 0b00000000000000000000000000000000 },
    {  0,  9, 0b00000000000000000000000000000000 },
    {  0, 10, 0b00000000000000000000000000000000 },
    {  0, 11, 0b00000000000000000000000000000000 },
    {  0, 12, 0b00000000000000000000000000000000 },
    {  0, 13, 0b00000000000000000000000000000000 },
    {  0, 14, 0b00000000000000000000000000000000 },
    {  0, 15, 0b00000000000000000000000000000000 },
    {  0, 16, 0b00000000000000000000000000000000 },
    {  0, 17, 0b00000000000000000000000000000000 },
    {  0, 18, 0b00000000000000000000000000000000 },
    {  0, 19, 0b00000000000000000000000000000000 },
    {  0, 20, 0b00000000000000000000000000000000 },
    {  0, 21, 0b00000000000000000000000000000000 },
    {  0, 22, 0b00000000000000000000000000000000 },
    {  0, 23, 0b00000000000000000000000000000000 },
    {  0, 24, 0b00000000000000000000000000000000 },
    {  0, 25, 0b00000000000000000000000000000000 },
    {  0, 26, 0b00000000000000000000000000000000 },
    {  0, 27, 0b00000000000000000000000000000000 },
    {  0, 28, 0b00000000000000000000000000000000 },
    {  0, 29, 0b00000000000000000000000000000000 },
    {  0, 30, 0b00000000000000000000000000000000 },
    {  0, 31, 0b00000000000000000000000000000000 },

    {  1,  0, 0b00000000000000000000000000000001 },
    {  1,  1, 0b00000000000000000000000000000010 },
    {  1,  2, 0b00000000000000000000000000000100 },
    {  1,  3, 0b00000000000000000000000000001000 },
    {  1,  4, 0b00000000000000000000000000010000 },
    {  1,  5, 0b00000000000000000000000000100000 },
    {  1,  6, 0b00000000000000000000000001000000 },
    {  1,  7, 0b00000000000000000000000010000000 },
    {  1,  8, 0b00000000000000000000000100000000 },
    {  1,  9, 0b00000000000000000000001000000000 },
    {  1, 10, 0b00000000000000000000010000000000 },
    {  1, 11, 0b00000000000000000000100000000000 },
    {  1, 12, 0b00000000000000000001000000000000 },
    {  1, 13, 0b00000000000000000010000000000000 },
    {  1, 14, 0b00000000000000000100000000000000 },
    {  1, 15, 0b00000000000000001000000000000000 },
    {  1, 16, 0b00000000000000010000000000000000 },
    {  1, 17, 0b00000000000000100000000000000000 },
    {  1, 18, 0b00000000000001000000000000000000 },
    {  1, 19, 0b00000000000010000000000000000000 },
    {  1, 20, 0b00000000000100000000000000000000 },
    {  1, 21, 0b00000000001000000000000000000000 },
    {  1, 22, 0b00000000010000000000000000000000 },
    {  1, 23, 0b00000000100000000000000000000000 },
    {  1, 24, 0b00000001000000000000000000000000 },
    {  1, 25, 0b00000010000000000000000000000000 },
    {  1, 26, 0b00000100000000000000000000000000 },
    {  1, 27, 0b00001000000000000000000000000000 },
    {  1, 28, 0b00010000000000000000000000000000 },
    {  1, 29, 0b00100000000000000000000000000000 },
    {  1, 30, 0b01000000000000000000000000000000 },
    {  1, 31, 0b10000000000000000000000000000000 },

    {  2,  0, 0b00000000000000000000000000000011 },
    {  2,  1, 0b00000000000000000000000000000110 },
    {  2,  2, 0b00000000000000000000000000001100 },
    {  2,  3, 0b00000000000000000000000000011000 },
    {  2,  4, 0b00000000000000000000000000110000 },
    {  2,  5, 0b00000000000000000000000001100000 },
    {  2,  6, 0b00000000000000000000000011000000 },
    {  2,  7, 0b00000000000000000000000110000000 },
    {  2,  8, 0b00000000000000000000001100000000 },
    {  2,  9, 0b00000000000000000000011000000000 },
    {  2, 10, 0b00000000000000000000110000000000 },
    {  2, 11, 0b00000000000000000001100000000000 },
    {  2, 12, 0b00000000000000000011000000000000 },
    {  2, 13, 0b00000000000000000110000000000000 },
    {  2, 14, 0b00000000000000001100000000000000 },
    {  2, 15, 0b00000000000000011000000000000000 },
    {  2, 16, 0b00000000000000110000000000000000 },
    {  2, 17, 0b00000000000001100000000000000000 },
    {  2, 18, 0b00000000000011000000000000000000 },
    {  2, 19, 0b00000000000110000000000000000000 },
    {  2, 20, 0b00000000001100000000000000000000 },
    {  2, 21, 0b00000000011000000000000000000000 },
    {  2, 22, 0b00000000110000000000000000000000 },
    {  2, 23, 0b00000001100000000000000000000000 },
    {  2, 24, 0b00000011000000000000000000000000 },
    {  2, 25, 0b00000110000000000000000000000000 },
    {  2, 26, 0b00001100000000000000000000000000 },
    {  2, 27, 0b00011000000000000000000000000000 },
    {  2, 28, 0b00110000000000000000000000000000 },
    {  2, 29, 0b01100000000000000000000000000000 },
    {  2, 30, 0b11000000000000000000000000000000 },

    {  3,  0, 0b00000000000000000000000000000111 },
    {  3,  1, 0b00000000000000000000000000001110 },
    {  3,  2, 0b00000000000000000000000000011100 },
    {  3,  3, 0b00000000000000000000000000111000 },
    {  3,  4, 0b00000000000000000000000001110000 },
    {  3,  5, 0b00000000000000000000000011100000 },
    {  3,  6, 0b00000000000000000000000111000000 },
    {  3,  7, 0b00000000000000000000001110000000 },
    {  3,  8, 0b00000000000000000000011100000000 },
    {  3,  9, 0b00000000000000000000111000000000 },
    {  3, 10, 0b00000000000000000001110000000000 },
    {  3, 11, 0b00000000000000000011100000000000 },
    {  3, 12, 0b00000000000000000111000000000000 },
    {  3, 13, 0b00000000000000001110000000000000 },
    {  3, 14, 0b00000000000000011100000000000000 },
    {  3, 15, 0b00000000000000111000000000000000 },
    {  3, 16, 0b00000000000001110000000000000000 },
    {  3, 17, 0b00000000000011100000000000000000 },
    {  3, 18, 0b00000000000111000000000000000000 },
    {  3, 19, 0b00000000001110000000000000000000 },
    {  3, 20, 0b00000000011100000000000000000000 },
    {  3, 21, 0b00000000111000000000000000000000 },
    {  3, 22, 0b00000001110000000000000000000000 },
    {  3, 23, 0b00000011100000000000000000000000 },
    {  3, 24, 0b00000111000000000000000000000000 },
    {  3, 25, 0b00001110000000000000000000000000 },
    {  3, 26, 0b00011100000000000000000000000000 },
    {  3, 27, 0b00111000000000000000000000000000 },
    {  3, 28, 0b01110000000000000000000000000000 },
    {  3, 29, 0b11100000000000000000000000000000 },

    {  4,  0, 0b00000000000000000000000000001111 },
    {  4,  1, 0b00000000000000000000000000011110 },
    {  4,  2, 0b00000000000000000000000000111100 },
    {  4,  3, 0b00000000000000000000000001111000 },
    {  4,  4, 0b00000000000000000000000011110000 },
    {  4,  5, 0b00000000000000000000000111100000 },
    {  4,  6, 0b00000000000000000000001111000000 },
    {  4,  7, 0b00000000000000000000011110000000 },
    {  4,  8, 0b00000000000000000000111100000000 },
    {  4,  9, 0b00000000000000000001111000000000 },
    {  4, 10, 0b00000000000000000011110000000000 },
    {  4, 11, 0b00000000000000000111100000000000 },
    {  4, 12, 0b00000000000000001111000000000000 },
    {  4, 13, 0b00000000000000011110000000000000 },
    {  4, 14, 0b00000000000000111100000000000000 },
    {  4, 15, 0b00000000000001111000000000000000 },
    {  4, 16, 0b00000000000011110000000000000000 },
    {  4, 17, 0b00000000000111100000000000000000 },
    {  4, 18, 0b00000000001111000000000000000000 },
    {  4, 19, 0b00000000011110000000000000000000 },
    {  4, 20, 0b00000000111100000000000000000000 },
    {  4, 21, 0b00000001111000000000000000000000 },
    {  4, 22, 0b00000011110000000000000000000000 },
    {  4, 23, 0b00000111100000000000000000000000 },
    {  4, 24, 0b00001111000000000000000000000000 },
    {  4, 25, 0b00011110000000000000000000000000 },
    {  4, 26, 0b00111100000000000000000000000000 },
    {  4, 27, 0b01111000000000000000000000000000 },
    {  4, 28, 0b11110000000000000000000000000000 },

    {  5,  0, 0b00000000000000000000000000011111 },
    {  5,  1, 0b00000000000000000000000000111110 },
    {  5,  2, 0b00000000000000000000000001111100 },
    {  5,  3, 0b00000000000000000000000011111000 },
    {  5,  4, 0b00000000000000000000000111110000 },
    {  5,  5, 0b00000000000000000000001111100000 },
    {  5,  6, 0b00000000000000000000011111000000 },
    {  5,  7, 0b00000000000000000000111110000000 },
    {  5,  8, 0b00000000000000000001111100000000 },
    {  5,  9, 0b00000000000000000011111000000000 },
    {  5, 10, 0b00000000000000000111110000000000 },
    {  5, 11, 0b00000000000000001111100000000000 },
    {  5, 12, 0b00000000000000011111000000000000 },
    {  5, 13, 0b00000000000000111110000000000000 },
    {  5, 14, 0b00000000000001111100000000000000 },
    {  5, 15, 0b00000000000011111000000000000000 },
    {  5, 16, 0b00000000000111110000000000000000 },
    {  5, 17, 0b00000000001111100000000000000000 },
    {  5, 18, 0b00000000011111000000000000000000 },
    {  5, 19, 0b00000000111110000000000000000000 },
    {  5, 20, 0b00000001111100000000000000000000 },
    {  5, 21, 0b00000011111000000000000000000000 },
    {  5, 22, 0b00000111110000000000000000000000 },
    {  5, 23, 0b00001111100000000000000000000000 },
    {  5, 24, 0b00011111000000000000000000000000 },
    {  5, 25, 0b00111110000000000000000000000000 },
    {  5, 26, 0b01111100000000000000000000000000 },
    {  5, 27, 0b11111000000000000000000000000000 },

    {  6,  0, 0b00000000000000000000000000111111 },
    {  6,  1, 0b00000000000000000000000001111110 },
    {  6,  2, 0b00000000000000000000000011111100 },
    {  6,  3, 0b00000000000000000000000111111000 },
    {  6,  4, 0b00000000000000000000001111110000 },
    {  6,  5, 0b00000000000000000000011111100000 },
    {  6,  6, 0b00000000000000000000111111000000 },
    {  6,  7, 0b00000000000000000001111110000000 },
    {  6,  8, 0b00000000000000000011111100000000 },
    {  6,  9, 0b00000000000000000111111000000000 },
    {  6, 10, 0b00000000000000001111110000000000 },
    {  6, 11, 0b00000000000000011111100000000000 },
    {  6, 12, 0b00000000000000111111000000000000 },
    {  6, 13, 0b00000000000001111110000000000000 },
    {  6, 14, 0b00000000000011111100000000000000 },
    {  6, 15, 0b00000000000111111000000000000000 },
    {  6, 16, 0b00000000001111110000000000000000 },
    {  6, 17, 0b00000000011111100000000000000000 },
    {  6, 18, 0b00000000111111000000000000000000 },
    {  6, 19, 0b00000001111110000000000000000000 },
    {  6, 20, 0b00000011111100000000000000000000 },
    {  6, 21, 0b00000111111000000000000000000000 },
    {  6, 22, 0b00001111110000000000000000000000 },
    {  6, 23, 0b00011111100000000000000000000000 },
    {  6, 24, 0b00111111000000000000000000000000 },
    {  6, 25, 0b01111110000000000000000000000000 },
    {  6, 26, 0b11111100000000000000000000000000 },

    {  7,  0, 0b00000000000000000000000001111111 },
    {  7,  1, 0b00000000000000000000000011111110 },
    {  7,  2, 0b00000000000000000000000111111100 },
    {  7,  3, 0b00000000000000000000001111111000 },
    {  7,  4, 0b00000000000000000000011111110000 },
    {  7,  5, 0b00000000000000000000111111100000 },
    {  7,  6, 0b00000000000000000001111111000000 },
    {  7,  7, 0b00000000000000000011111110000000 },
    {  7,  8, 0b00000000000000000111111100000000 },
    {  7,  9, 0b00000000000000001111111000000000 },
    {  7, 10, 0b00000000000000011111110000000000 },
    {  7, 11, 0b00000000000000111111100000000000 },
    {  7, 12, 0b00000000000001111111000000000000 },
    {  7, 13, 0b00000000000011111110000000000000 },
    {  7, 14, 0b00000000000111111100000000000000 },
    {  7, 15, 0b00000000001111111000000000000000 },
    {  7, 16, 0b00000000011111110000000000000000 },
    {  7, 17, 0b00000000111111100000000000000000 },
    {  7, 18, 0b00000001111111000000000000000000 },
    {  7, 19, 0b00000011111110000000000000000000 },
    {  7, 20, 0b00000111111100000000000000000000 },
    {  7, 21, 0b00001111111000000000000000000000 },
    {  7, 22, 0b00011111110000000000000000000000 },
    {  7, 23, 0b00111111100000000000000000000000 },
    {  7, 24, 0b01111111000000000000000000000000 },
    {  7, 25, 0b11111110000000000000000000000000 },

    {  8,  0, 0b00000000000000000000000011111111 },
    {  8,  1, 0b00000000000000000000000111111110 },
    {  8,  2, 0b00000000000000000000001111111100 },
    {  8,  3, 0b00000000000000000000011111111000 },
    {  8,  4, 0b00000000000000000000111111110000 },
    {  8,  5, 0b00000000000000000001111111100000 },
    {  8,  6, 0b00000000000000000011111111000000 },
    {  8,  7, 0b00000000000000000111111110000000 },
    {  8,  8, 0b00000000000000001111111100000000 },
    {  8,  9, 0b00000000000000011111111000000000 },
    {  8, 10, 0b00000000000000111111110000000000 },
    {  8, 11, 0b00000000000001111111100000000000 },
    {  8, 12, 0b00000000000011111111000000000000 },
    {  8, 13, 0b00000000000111111110000000000000 },
    {  8, 14, 0b00000000001111111100000000000000 },
    {  8, 15, 0b00000000011111111000000000000000 },
    {  8, 16, 0b00000000111111110000000000000000 },
    {  8, 17, 0b00000001111111100000000000000000 },
    {  8, 18, 0b00000011111111000000000000000000 },
    {  8, 19, 0b00000111111110000000000000000000 },
    {  8, 20, 0b00001111111100000000000000000000 },
    {  8, 21, 0b00011111111000000000000000000000 },
    {  8, 22, 0b00111111110000000000000000000000 },
    {  8, 23, 0b01111111100000000000000000000000 },
    {  8, 24, 0b11111111000000000000000000000000 },

    {  9,  0, 0b00000000000000000000000111111111 },
    {  9,  1, 0b00000000000000000000001111111110 },
    {  9,  2, 0b00000000000000000000011111111100 },
    {  9,  3, 0b00000000000000000000111111111000 },
    {  9,  4, 0b00000000000000000001111111110000 },
    {  9,  5, 0b00000000000000000011111111100000 },
    {  9,  6, 0b00000000000000000111111111000000 },
    {  9,  7, 0b00000000000000001111111110000000 },
    {  9,  8, 0b00000000000000011111111100000000 },
    {  9,  9, 0b00000000000000111111111000000000 },
    {  9, 10, 0b00000000000001111111110000000000 },
    {  9, 11, 0b00000000000011111111100000000000 },
    {  9, 12, 0b00000000000111111111000000000000 },
    {  9, 13, 0b00000000001111111110000000000000 },
    {  9, 14, 0b00000000011111111100000000000000 },
    {  9, 15, 0b00000000111111111000000000000000 },
    {  9, 16, 0b00000001111111110000000000000000 },
    {  9, 17, 0b00000011111111100000000000000000 },
    {  9, 18, 0b00000111111111000000000000000000 },
    {  9, 19, 0b00001111111110000000000000000000 },
    {  9, 20, 0b00011111111100000000000000000000 },
    {  9, 21, 0b00111111111000000000000000000000 },
    {  9, 22, 0b01111111110000000000000000000000 },
    {  9, 23, 0b11111111100000000000000000000000 },

    { 10,  0, 0b00000000000000000000001111111111 },
    { 10,  1, 0b00000000000000000000011111111110 },
    { 10,  2, 0b00000000000000000000111111111100 },
    { 10,  3, 0b00000000000000000001111111111000 },
    { 10,  4, 0b00000000000000000011111111110000 },
    { 10,  5, 0b00000000000000000111111111100000 },
    { 10,  6, 0b00000000000000001111111111000000 },
    { 10,  7, 0b00000000000000011111111110000000 },
    { 10,  8, 0b00000000000000111111111100000000 },
    { 10,  9, 0b00000000000001111111111000000000 },
    { 10, 10, 0b00000000000011111111110000000000 },
    { 10, 11, 0b00000000000111111111100000000000 },
    { 10, 12, 0b00000000001111111111000000000000 },
    { 10, 13, 0b00000000011111111110000000000000 },
    { 10, 14, 0b00000000111111111100000000000000 },
    { 10, 15, 0b00000001111111111000000000000000 },
    { 10, 16, 0b00000011111111110000000000000000 },
    { 10, 17, 0b00000111111111100000000000000000 },
    { 10, 18, 0b00001111111111000000000000000000 },
    { 10, 19, 0b00011111111110000000000000000000 },
    { 10, 20, 0b00111111111100000000000000000000 },
    { 10, 21, 0b01111111111000000000000000000000 },
    { 10, 22, 0b11111111110000000000000000000000 },

    { 11,  0, 0b00000000000000000000011111111111 },
    { 11,  1, 0b00000000000000000000111111111110 },
    { 11,  2, 0b00000000000000000001111111111100 },
    { 11,  3, 0b00000000000000000011111111111000 },
    { 11,  4, 0b00000000000000000111111111110000 },
    { 11,  5, 0b00000000000000001111111111100000 },
    { 11,  6, 0b00000000000000011111111111000000 },
    { 11,  7, 0b00000000000000111111111110000000 },
    { 11,  8, 0b00000000000001111111111100000000 },
    { 11,  9, 0b00000000000011111111111000000000 },
    { 11, 10, 0b00000000000111111111110000000000 },
    { 11, 11, 0b00000000001111111111100000000000 },
    { 11, 12, 0b00000000011111111111000000000000 },
    { 11, 13, 0b00000000111111111110000000000000 },
    { 11, 14, 0b00000001111111111100000000000000 },
    { 11, 15, 0b00000011111111111000000000000000 },
    { 11, 16, 0b00000111111111110000000000000000 },
    { 11, 17, 0b00001111111111100000000000000000 },
    { 11, 18, 0b00011111111111000000000000000000 },
    { 11, 19, 0b00111111111110000000000000000000 },
    { 11, 20, 0b01111111111100000000000000000000 },
    { 11, 21, 0b11111111111000000000000000000000 },

    { 12,  0, 0b00000000000000000000111111111111 },
    { 12,  1, 0b00000000000000000001111111111110 },
    { 12,  2, 0b00000000000000000011111111111100 },
    { 12,  3, 0b00000000000000000111111111111000 },
    { 12,  4, 0b00000000000000001111111111110000 },
    { 12,  5, 0b00000000000000011111111111100000 },
    { 12,  6, 0b00000000000000111111111111000000 },
    { 12,  7, 0b00000000000001111111111110000000 },
    { 12,  8, 0b00000000000011111111111100000000 },
    { 12,  9, 0b00000000000111111111111000000000 },
    { 12, 10, 0b00000000001111111111110000000000 },
    { 12, 11, 0b00000000011111111111100000000000 },
    { 12, 12, 0b00000000111111111111000000000000 },
    { 12, 13, 0b00000001111111111110000000000000 },
    { 12, 14, 0b00000011111111111100000000000000 },
    { 12, 15, 0b00000111111111111000000000000000 },
    { 12, 16, 0b00001111111111110000000000000000 },
    { 12, 17, 0b00011111111111100000000000000000 },
    { 12, 18, 0b00111111111111000000000000000000 },
    { 12, 19, 0b01111111111110000000000000000000 },
    { 12, 20, 0b11111111111100000000000000000000 },

    { 13,  0, 0b00000000000000000001111111111111 },
    { 13,  1, 0b00000000000000000011111111111110 },
    { 13,  2, 0b00000000000000000111111111111100 },
    { 13,  3, 0b00000000000000001111111111111000 },
    { 13,  4, 0b00000000000000011111111111110000 },
    { 13,  5, 0b00000000000000111111111111100000 },
    { 13,  6, 0b00000000000001111111111111000000 },
    { 13,  7, 0b00000000000011111111111110000000 },
    { 13,  8, 0b00000000000111111111111100000000 },
    { 13,  9, 0b00000000001111111111111000000000 },
    { 13, 10, 0b00000000011111111111110000000000 },
    { 13, 11, 0b00000000111111111111100000000000 },
    { 13, 12, 0b00000001111111111111000000000000 },
    { 13, 13, 0b00000011111111111110000000000000 },
    { 13, 14, 0b00000111111111111100000000000000 },
    { 13, 15, 0b00001111111111111000000000000000 },
    { 13, 16, 0b00011111111111110000000000000000 },
    { 13, 17, 0b00111111111111100000000000000000 },
    { 13, 18, 0b01111111111111000000000000000000 },
    { 13, 19, 0b11111111111110000000000000000000 },

    { 14,  0, 0b00000000000000000011111111111111 },
    { 14,  1, 0b00000000000000000111111111111110 },
    { 14,  2, 0b00000000000000001111111111111100 },
    { 14,  3, 0b00000000000000011111111111111000 },
    { 14,  4, 0b00000000000000111111111111110000 },
    { 14,  5, 0b00000000000001111111111111100000 },
    { 14,  6, 0b00000000000011111111111111000000 },
    { 14,  7, 0b00000000000111111111111110000000 },
    { 14,  8, 0b00000000001111111111111100000000 },
    { 14,  9, 0b00000000011111111111111000000000 },
    { 14, 10, 0b00000000111111111111110000000000 },
    { 14, 11, 0b00000001111111111111100000000000 },
    { 14, 12, 0b00000011111111111111000000000000 },
    { 14, 13, 0b00000111111111111110000000000000 },
    { 14, 14, 0b00001111111111111100000000000000 },
    { 14, 15, 0b00011111111111111000000000000000 },
    { 14, 16, 0b00111111111111110000000000000000 },
    { 14, 17, 0b01111111111111100000000000000000 },
    { 14, 18, 0b11111111111111000000000000000000 },

    { 15,  0, 0b00000000000000000111111111111111 },
    { 15,  1, 0b00000000000000001111111111111110 },
    { 15,  2, 0b00000000000000011111111111111100 },
    { 15,  3, 0b00000000000000111111111111111000 },
    { 15,  4, 0b00000000000001111111111111110000 },
    { 15,  5, 0b00000000000011111111111111100000 },
    { 15,  6, 0b00000000000111111111111111000000 },
    { 15,  7, 0b00000000001111111111111110000000 },
    { 15,  8, 0b00000000011111111111111100000000 },
    { 15,  9, 0b00000000111111111111111000000000 },
    { 15, 10, 0b00000001111111111111110000000000 },
    { 15, 11, 0b00000011111111111111100000000000 },
    { 15, 12, 0b00000111111111111111000000000000 },
    { 15, 13, 0b00001111111111111110000000000000 },
    { 15, 14, 0b00011111111111111100000000000000 },
    { 15, 15, 0b00111111111111111000000000000000 },
    { 15, 16, 0b01111111111111110000000000000000 },
    { 15, 17, 0b11111111111111100000000000000000 },

    { 16,  0, 0b00000000000000001111111111111111 },
    { 16,  1, 0b00000000000000011111111111111110 },
    { 16,  2, 0b00000000000000111111111111111100 },
    { 16,  3, 0b00000000000001111111111111111000 },
    { 16,  4, 0b00000000000011111111111111110000 },
    { 16,  5, 0b00000000000111111111111111100000 },
    { 16,  6, 0b00000000001111111111111111000000 },
    { 16,  7, 0b00000000011111111111111110000000 },
    { 16,  8, 0b00000000111111111111111100000000 },
    { 16,  9, 0b00000001111111111111111000000000 },
    { 16, 10, 0b00000011111111111111110000000000 },
    { 16, 11, 0b00000111111111111111100000000000 },
    { 16, 12, 0b00001111111111111111000000000000 },
    { 16, 13, 0b00011111111111111110000000000000 },
    { 16, 14, 0b00111111111111111100000000000000 },
    { 16, 15, 0b01111111111111111000000000000000 },
    { 16, 16, 0b11111111111111110000000000000000 },

    { 17,  0, 0b00000000000000011111111111111111 },
    { 17,  1, 0b00000000000000111111111111111110 },
    { 17,  2, 0b00000000000001111111111111111100 },
    { 17,  3, 0b00000000000011111111111111111000 },
    { 17,  4, 0b00000000000111111111111111110000 },
    { 17,  5, 0b00000000001111111111111111100000 },
    { 17,  6, 0b00000000011111111111111111000000 },
    { 17,  7, 0b00000000111111111111111110000000 },
    { 17,  8, 0b00000001111111111111111100000000 },
    { 17,  9, 0b00000011111111111111111000000000 },
    { 17, 10, 0b00000111111111111111110000000000 },
    { 17, 11, 0b00001111111111111111100000000000 },
    { 17, 12, 0b00011111111111111111000000000000 },
    { 17, 13, 0b00111111111111111110000000000000 },
    { 17, 14, 0b01111111111111111100000000000000 },
    { 17, 15, 0b11111111111111111000000000000000 },

    { 18,  0, 0b00000000000000111111111111111111 },
    { 18,  1, 0b00000000000001111111111111111110 },
    { 18,  2, 0b00000000000011111111111111111100 },
    { 18,  3, 0b00000000000111111111111111111000 },
    { 18,  4, 0b00000000001111111111111111110000 },
    { 18,  5, 0b00000000011111111111111111100000 },
    { 18,  6, 0b00000000111111111111111111000000 },
    { 18,  7, 0b00000001111111111111111110000000 },
    { 18,  8, 0b00000011111111111111111100000000 },
    { 18,  9, 0b00000111111111111111111000000000 },
    { 18, 10, 0b00001111111111111111110000000000 },
    { 18, 11, 0b00011111111111111111100000000000 },
    { 18, 12, 0b00111111111111111111000000000000 },
    { 18, 13, 0b01111111111111111110000000000000 },
    { 18, 14, 0b11111111111111111100000000000000 },

    { 19,  0, 0b00000000000001111111111111111111 },
    { 19,  1, 0b00000000000011111111111111111110 },
    { 19,  2, 0b00000000000111111111111111111100 },
    { 19,  3, 0b00000000001111111111111111111000 },
    { 19,  4, 0b00000000011111111111111111110000 },
    { 19,  5, 0b00000000111111111111111111100000 },
    { 19,  6, 0b00000001111111111111111111000000 },
    { 19,  7, 0b00000011111111111111111110000000 },
    { 19,  8, 0b00000111111111111111111100000000 },
    { 19,  9, 0b00001111111111111111111000000000 },
    { 19, 10, 0b00011111111111111111110000000000 },
    { 19, 11, 0b00111111111111111111100000000000 },
    { 19, 12, 0b01111111111111111111000000000000 },
    { 19, 13, 0b11111111111111111110000000000000 },

    { 20,  0, 0b00000000000011111111111111111111 },
    { 20,  1, 0b00000000000111111111111111111110 },
    { 20,  2, 0b00000000001111111111111111111100 },
    { 20,  3, 0b00000000011111111111111111111000 },
    { 20,  4, 0b00000000111111111111111111110000 },
    { 20,  5, 0b00000001111111111111111111100000 },
    { 20,  6, 0b00000011111111111111111111000000 },
    { 20,  7, 0b00000111111111111111111110000000 },
    { 20,  8, 0b00001111111111111111111100000000 },
    { 20,  9, 0b00011111111111111111111000000000 },
    { 20, 10, 0b00111111111111111111110000000000 },
    { 20, 11, 0b01111111111111111111100000000000 },
    { 20, 12, 0b11111111111111111111000000000000 },

    { 21,  0, 0b00000000000111111111111111111111 },
    { 21,  1, 0b00000000001111111111111111111110 },
    { 21,  2, 0b00000000011111111111111111111100 },
    { 21,  3, 0b00000000111111111111111111111000 },
    { 21,  4, 0b00000001111111111111111111110000 },
    { 21,  5, 0b00000011111111111111111111100000 },
    { 21,  6, 0b00000111111111111111111111000000 },
    { 21,  7, 0b00001111111111111111111110000000 },
    { 21,  8, 0b00011111111111111111111100000000 },
    { 21,  9, 0b00111111111111111111111000000000 },
    { 21, 10, 0b01111111111111111111110000000000 },
    { 21, 11, 0b11111111111111111111100000000000 },

    { 22,  0, 0b00000000001111111111111111111111 },
    { 22,  1, 0b00000000011111111111111111111110 },
    { 22,  2, 0b00000000111111111111111111111100 },
    { 22,  3, 0b00000001111111111111111111111000 },
    { 22,  4, 0b00000011111111111111111111110000 },
    { 22,  5, 0b00000111111111111111111111100000 },
    { 22,  6, 0b00001111111111111111111111000000 },
    { 22,  7, 0b00011111111111111111111110000000 },
    { 22,  8, 0b00111111111111111111111100000000 },
    { 22,  9, 0b01111111111111111111111000000000 },
    { 22, 10, 0b11111111111111111111110000000000 },

    { 23,  0, 0b00000000011111111111111111111111 },
    { 23,  1, 0b00000000111111111111111111111110 },
    { 23,  2, 0b00000001111111111111111111111100 },
    { 23,  3, 0b00000011111111111111111111111000 },
    { 23,  4, 0b00000111111111111111111111110000 },
    { 23,  5, 0b00001111111111111111111111100000 },
    { 23,  6, 0b00011111111111111111111111000000 },
    { 23,  7, 0b00111111111111111111111110000000 },
    { 23,  8, 0b01111111111111111111111100000000 },
    { 23,  9, 0b11111111111111111111111000000000 },

    { 24,  0, 0b00000000111111111111111111111111 },
    { 24,  1, 0b00000001111111111111111111111110 },
    { 24,  2, 0b00000011111111111111111111111100 },
    { 24,  3, 0b00000111111111111111111111111000 },
    { 24,  4, 0b00001111111111111111111111110000 },
    { 24,  5, 0b00011111111111111111111111100000 },
    { 24,  6, 0b00111111111111111111111111000000 },
    { 24,  7, 0b01111111111111111111111110000000 },
    { 24,  8, 0b11111111111111111111111100000000 },

    { 25,  0, 0b00000001111111111111111111111111 },
    { 25,  1, 0b00000011111111111111111111111110 },
    { 25,  2, 0b00000111111111111111111111111100 },
    { 25,  3, 0b00001111111111111111111111111000 },
    { 25,  4, 0b00011111111111111111111111110000 },
    { 25,  5, 0b00111111111111111111111111100000 },
    { 25,  6, 0b01111111111111111111111111000000 },
    { 25,  7, 0b11111111111111111111111110000000 },

    { 26,  0, 0b00000011111111111111111111111111 },
    { 26,  1, 0b00000111111111111111111111111110 },
    { 26,  2, 0b00001111111111111111111111111100 },
    { 26,  3, 0b00011111111111111111111111111000 },
    { 26,  4, 0b00111111111111111111111111110000 },
    { 26,  5, 0b01111111111111111111111111100000 },
    { 26,  6, 0b11111111111111111111111111000000 },

    { 27,  0, 0b00000111111111111111111111111111 },
    { 27,  1, 0b00001111111111111111111111111110 },
    { 27,  2, 0b00011111111111111111111111111100 },
    { 27,  3, 0b00111111111111111111111111111000 },
    { 27,  4, 0b01111111111111111111111111110000 },
    { 27,  5, 0b11111111111111111111111111100000 },

    { 28,  0, 0b00001111111111111111111111111111 },
    { 28,  1, 0b00011111111111111111111111111110 },
    { 28,  2, 0b00111111111111111111111111111100 },
    { 28,  3, 0b01111111111111111111111111111000 },
    { 28,  4, 0b11111111111111111111111111110000 },

    { 29,  0, 0b00011111111111111111111111111111 },
    { 29,  1, 0b00111111111111111111111111111110 },
    { 29,  2, 0b01111111111111111111111111111100 },
    { 29,  3, 0b11111111111111111111111111111000 },

    { 30,  0, 0b00111111111111111111111111111111 },
    { 30,  1, 0b01111111111111111111111111111110 },
    { 30,  2, 0b11111111111111111111111111111100 },

    { 31,  0, 0b01111111111111111111111111111111 },
    { 31,  1, 0b11111111111111111111111111111110 },

    { 32,  0, 0b11111111111111111111111111111111 },

    // clang-format on
};

/**
 * \brief picolibrary::mask<std::uint32_t>() test fixture.
 */
class mask32 : public TestWithParam<mask_Test_Case<std::uint32_t>> {
};

INSTANTIATE_TEST_SUITE_P( testCases, mask32, ValuesIn( mask32_TEST_CASES ) );

/**
 * \brief Verify picolibrary::mask<std::uint32_t>() works properly.
 */
TEST_P( mask32, worksProperly )
{
    auto const test_case = GetParam();

    ASSERT_EQ( mask<std::uint32_t>( test_case.size, test_case.bit ), test_case.mask );
}

/**
 * \brief picolibrary::reflect() test case.
 *
 * \tparam T The unsigned integer type to reflect.
 */
template<typename T>
struct reflect_Test_Case {
    /**
     * \brief The value to reflect.
     */
    T value;

    /**
     * \brief The reflected value.
     */
    T reflection;
};

template<typename T>
auto operator<<( std::ostream & stream, reflect_Test_Case<T> const & test_case ) -> std::ostream &
{
    // clang-format off

    return stream << "{ "
                  << ".value = 0b" << std::bitset<std::numeric_limits<T>::digits>{ test_case.value }
                  << ", "
                  << ".reflection = 0b" << std::bitset<std::numeric_limits<T>::digits>{ test_case.reflection }
                  << " }";

    // clang-format on
}

/**
 * \brief picolibrary::reflect<std::uint8_t>() test cases.
 */
reflect_Test_Case<std::uint8_t> const reflect8_TEST_CASES[]{
    // clang-format off

    { 0b00000000, 0b00000000 },
    { 0b11111111, 0b11111111 },

    { 0b00000001, 0b10000000 },
    { 0b00000010, 0b01000000 },
    { 0b00000100, 0b00100000 },
    { 0b00001000, 0b00010000 },
    { 0b00010000, 0b00001000 },
    { 0b00100000, 0b00000100 },
    { 0b01000000, 0b00000010 },
    { 0b10000000, 0b00000001 },

    { 0b00000011, 0b11000000 },
    { 0b00000111, 0b11100000 },
    { 0b00001111, 0b11110000 },
    { 0b00011111, 0b11111000 },
    { 0b00111111, 0b11111100 },
    { 0b01111111, 0b11111110 },

    { 0b11111110, 0b01111111 },
    { 0b11111100, 0b00111111 },
    { 0b11111000, 0b00011111 },
    { 0b11110000, 0b00001111 },
    { 0b11100000, 0b00000111 },
    { 0b11000000, 0b00000011 },

    // clang-format on
};

/**
 * \brief picolibrary::reflect<std::uint8_t>() test fixture.
 */
class reflect8 : public TestWithParam<reflect_Test_Case<std::uint8_t>> {
};

INSTANTIATE_TEST_SUITE_P( testCases, reflect8, ValuesIn( reflect8_TEST_CASES ) );

/**
 * \brief Verify picolibrary::reflect<std::uint8_t>() works properly.
 */
TEST_P( reflect8, worksProperly )
{
    auto const test_case = GetParam();

    ASSERT_EQ( reflect( test_case.value ), test_case.reflection );
}

/**
 * \brief picolibrary::reflect<std::uint16_t>() test cases.
 */
reflect_Test_Case<std::uint16_t> const reflect16_TEST_CASES[]{
    // clang-format off

    { 0b0000000000000000, 0b0000000000000000 },
    { 0b1111111111111111, 0b1111111111111111 },

    { 0b0000000000000001, 0b1000000000000000 },
    { 0b0000000000000010, 0b0100000000000000 },
    { 0b0000000000000100, 0b0010000000000000 },
    { 0b0000000000001000, 0b0001000000000000 },
    { 0b0000000000010000, 0b0000100000000000 },
    { 0b0000000000100000, 0b0000010000000000 },
    { 0b0000000001000000, 0b0000001000000000 },
    { 0b0000000010000000, 0b0000000100000000 },
    { 0b0000000100000000, 0b0000000010000000 },
    { 0b0000001000000000, 0b0000000001000000 },
    { 0b0000010000000000, 0b0000000000100000 },
    { 0b0000100000000000, 0b0000000000010000 },
    { 0b0001000000000000, 0b0000000000001000 },
    { 0b0010000000000000, 0b0000000000000100 },
    { 0b0100000000000000, 0b0000000000000010 },
    { 0b1000000000000000, 0b0000000000000001 },

    { 0b0000000000000011, 0b1100000000000000 },
    { 0b0000000000000111, 0b1110000000000000 },
    { 0b0000000000001111, 0b1111000000000000 },
    { 0b0000000000011111, 0b1111100000000000 },
    { 0b0000000000111111, 0b1111110000000000 },
    { 0b0000000001111111, 0b1111111000000000 },
    { 0b0000000011111111, 0b1111111100000000 },
    { 0b0000000111111111, 0b1111111110000000 },
    { 0b0000001111111111, 0b1111111111000000 },
    { 0b0000011111111111, 0b1111111111100000 },
    { 0b0000111111111111, 0b1111111111110000 },
    { 0b0001111111111111, 0b1111111111111000 },
    { 0b0011111111111111, 0b1111111111111100 },
    { 0b0111111111111111, 0b1111111111111110 },

    { 0b1111111111111110, 0b0111111111111111 },
    { 0b1111111111111100, 0b0011111111111111 },
    { 0b1111111111111000, 0b0001111111111111 },
    { 0b1111111111110000, 0b0000111111111111 },
    { 0b1111111111100000, 0b0000011111111111 },
    { 0b1111111111000000, 0b0000001111111111 },
    { 0b1111111110000000, 0b0000000111111111 },
    { 0b1111111100000000, 0b0000000011111111 },
    { 0b1111111000000000, 0b0000000001111111 },
    { 0b1111110000000000, 0b0000000000111111 },
    { 0b1111100000000000, 0b0000000000011111 },
    { 0b1111000000000000, 0b0000000000001111 },
    { 0b1110000000000000, 0b0000000000000111 },
    { 0b1100000000000000, 0b0000000000000011 },

    // clang-format on
};

/**
 * \brief picolibrary::reflect<std::uint16_t>() test fixture.
 */
class reflect16 : public TestWithParam<reflect_Test_Case<std::uint16_t>> {
};

INSTANTIATE_TEST_SUITE_P( testCases, reflect16, ValuesIn( reflect16_TEST_CASES ) );

/**
 * \brief Verify picolibrary::reflect<std::uint16_t>() works properly.
 */
TEST_P( reflect16, worksProperly )
{
    auto const test_case = GetParam();

    ASSERT_EQ( reflect( test_case.value ), test_case.reflection );
}

/**
 * \brief picolibrary::reflect<std::uint32_t>() test cases.
 */
reflect_Test_Case<std::uint32_t> const reflect32_TEST_CASES[]{
    // clang-format off

    { 0b00000000000000000000000000000000, 0b00000000000000000000000000000000 },
    { 0b11111111111111111111111111111111, 0b11111111111111111111111111111111 },

    { 0b00000000000000000000000000000001, 0b10000000000000000000000000000000 },
    { 0b00000000000000000000000000000010, 0b01000000000000000000000000000000 },
    { 0b00000000000000000000000000000100, 0b00100000000000000000000000000000 },
    { 0b00000000000000000000000000001000, 0b00010000000000000000000000000000 },
    { 0b00000000000000000000000000010000, 0b00001000000000000000000000000000 },
    { 0b00000000000000000000000000100000, 0b00000100000000000000000000000000 },
    { 0b00000000000000000000000001000000, 0b00000010000000000000000000000000 },
    { 0b00000000000000000000000010000000, 0b00000001000000000000000000000000 },
    { 0b00000000000000000000000100000000, 0b00000000100000000000000000000000 },
    { 0b00000000000000000000001000000000, 0b00000000010000000000000000000000 },
    { 0b00000000000000000000010000000000, 0b00000000001000000000000000000000 },
    { 0b00000000000000000000100000000000, 0b00000000000100000000000000000000 },
    { 0b00000000000000000001000000000000, 0b00000000000010000000000000000000 },
    { 0b00000000000000000010000000000000, 0b00000000000001000000000000000000 },
    { 0b00000000000000000100000000000000, 0b00000000000000100000000000000000 },
    { 0b00000000000000001000000000000000, 0b00000000000000010000000000000000 },
    { 0b00000000000000010000000000000000, 0b00000000000000001000000000000000 },
    { 0b00000000000000100000000000000000, 0b00000000000000000100000000000000 },
    { 0b00000000000001000000000000000000, 0b00000000000000000010000000000000 },
    { 0b00000000000010000000000000000000, 0b00000000000000000001000000000000 },
    { 0b00000000000100000000000000000000, 0b00000000000000000000100000000000 },
    { 0b00000000001000000000000000000000, 0b00000000000000000000010000000000 },
    { 0b00000000010000000000000000000000, 0b00000000000000000000001000000000 },
    { 0b00000000100000000000000000000000, 0b00000000000000000000000100000000 },
    { 0b00000001000000000000000000000000, 0b00000000000000000000000010000000 },
    { 0b00000010000000000000000000000000, 0b00000000000000000000000001000000 },
    { 0b00000100000000000000000000000000, 0b00000000000000000000000000100000 },
    { 0b00001000000000000000000000000000, 0b00000000000000000000000000010000 },
    { 0b00010000000000000000000000000000, 0b00000000000000000000000000001000 },
    { 0b00100000000000000000000000000000, 0b00000000000000000000000000000100 },
    { 0b01000000000000000000000000000000, 0b00000000000000000000000000000010 },
    { 0b10000000000000000000000000000000, 0b00000000000000000000000000000001 },

    { 0b00000000000000000000000000000011, 0b11000000000000000000000000000000 },
    { 0b00000000000000000000000000000111, 0b11100000000000000000000000000000 },
    { 0b00000000000000000000000000001111, 0b11110000000000000000000000000000 },
    { 0b00000000000000000000000000011111, 0b11111000000000000000000000000000 },
    { 0b00000000000000000000000000111111, 0b11111100000000000000000000000000 },
    { 0b00000000000000000000000001111111, 0b11111110000000000000000000000000 },
    { 0b00000000000000000000000011111111, 0b11111111000000000000000000000000 },
    { 0b00000000000000000000000111111111, 0b11111111100000000000000000000000 },
    { 0b00000000000000000000001111111111, 0b11111111110000000000000000000000 },
    { 0b00000000000000000000011111111111, 0b11111111111000000000000000000000 },
    { 0b00000000000000000000111111111111, 0b11111111111100000000000000000000 },
    { 0b00000000000000000001111111111111, 0b11111111111110000000000000000000 },
    { 0b00000000000000000011111111111111, 0b11111111111111000000000000000000 },
    { 0b00000000000000000111111111111111, 0b11111111111111100000000000000000 },
    { 0b00000000000000001111111111111111, 0b11111111111111110000000000000000 },
    { 0b00000000000000011111111111111111, 0b11111111111111111000000000000000 },
    { 0b00000000000000111111111111111111, 0b11111111111111111100000000000000 },
    { 0b00000000000001111111111111111111, 0b11111111111111111110000000000000 },
    { 0b00000000000011111111111111111111, 0b11111111111111111111000000000000 },
    { 0b00000000000111111111111111111111, 0b11111111111111111111100000000000 },
    { 0b00000000001111111111111111111111, 0b11111111111111111111110000000000 },
    { 0b00000000011111111111111111111111, 0b11111111111111111111111000000000 },
    { 0b00000000111111111111111111111111, 0b11111111111111111111111100000000 },
    { 0b00000001111111111111111111111111, 0b11111111111111111111111110000000 },
    { 0b00000011111111111111111111111111, 0b11111111111111111111111111000000 },
    { 0b00000111111111111111111111111111, 0b11111111111111111111111111100000 },
    { 0b00001111111111111111111111111111, 0b11111111111111111111111111110000 },
    { 0b00011111111111111111111111111111, 0b11111111111111111111111111111000 },
    { 0b00111111111111111111111111111111, 0b11111111111111111111111111111100 },
    { 0b01111111111111111111111111111111, 0b11111111111111111111111111111110 },

    { 0b11111111111111111111111111111110, 0b01111111111111111111111111111111 },
    { 0b11111111111111111111111111111100, 0b00111111111111111111111111111111 },
    { 0b11111111111111111111111111111000, 0b00011111111111111111111111111111 },
    { 0b11111111111111111111111111110000, 0b00001111111111111111111111111111 },
    { 0b11111111111111111111111111100000, 0b00000111111111111111111111111111 },
    { 0b11111111111111111111111111000000, 0b00000011111111111111111111111111 },
    { 0b11111111111111111111111110000000, 0b00000001111111111111111111111111 },
    { 0b11111111111111111111111100000000, 0b00000000111111111111111111111111 },
    { 0b11111111111111111111111000000000, 0b00000000011111111111111111111111 },
    { 0b11111111111111111111110000000000, 0b00000000001111111111111111111111 },
    { 0b11111111111111111111100000000000, 0b00000000000111111111111111111111 },
    { 0b11111111111111111111000000000000, 0b00000000000011111111111111111111 },
    { 0b11111111111111111110000000000000, 0b00000000000001111111111111111111 },
    { 0b11111111111111111100000000000000, 0b00000000000000111111111111111111 },
    { 0b11111111111111111000000000000000, 0b00000000000000011111111111111111 },
    { 0b11111111111111110000000000000000, 0b00000000000000001111111111111111 },
    { 0b11111111111111100000000000000000, 0b00000000000000000111111111111111 },
    { 0b11111111111111000000000000000000, 0b00000000000000000011111111111111 },
    { 0b11111111111110000000000000000000, 0b00000000000000000001111111111111 },
    { 0b11111111111100000000000000000000, 0b00000000000000000000111111111111 },
    { 0b11111111111000000000000000000000, 0b00000000000000000000011111111111 },
    { 0b11111111110000000000000000000000, 0b00000000000000000000001111111111 },
    { 0b11111111100000000000000000000000, 0b00000000000000000000000111111111 },
    { 0b11111111000000000000000000000000, 0b00000000000000000000000011111111 },
    { 0b11111110000000000000000000000000, 0b00000000000000000000000001111111 },
    { 0b11111100000000000000000000000000, 0b00000000000000000000000000111111 },
    { 0b11111000000000000000000000000000, 0b00000000000000000000000000011111 },
    { 0b11110000000000000000000000000000, 0b00000000000000000000000000001111 },
    { 0b11100000000000000000000000000000, 0b00000000000000000000000000000111 },
    { 0b11000000000000000000000000000000, 0b00000000000000000000000000000011 },

    // clang-format on
};

/**
 * \brief picolibrary::reflect<std::uint32_t>() test fixture.
 */
class reflect32 : public TestWithParam<reflect_Test_Case<std::uint32_t>> {
};

INSTANTIATE_TEST_SUITE_P( testCases, reflect32, ValuesIn( reflect32_TEST_CASES ) );

/**
 * \brief Verify picolibrary::reflect<std::uint32_t>() works properly.
 */
TEST_P( reflect32, worksProperly )
{
    auto const test_case = GetParam();

    ASSERT_EQ( reflect( test_case.value ), test_case.reflection );
}

/**
 * \brief picolibrary::is_power_of_two() test case.
 *
 * \tparam T The type of unsigned integer the check will be performed on.
 */
template<typename T>
struct isPowerOfTwo_Test_Case {
    /**
     * \brief The value to perform the check on.
     */
    T value;

    /**
     * \brief value is a power of two.
     */
    bool is_power_of_two;
};

template<typename T>
auto operator<<( std::ostream & stream, isPowerOfTwo_Test_Case<T> const & test_case )
    -> std::ostream &
{
    // clang-format off

    return stream << "{ "
                  << ".value = 0b" << std::bitset<std::numeric_limits<T>::digits>{ test_case.value }
                  << ", "
                  << ".is_power_of_two = " << std::boolalpha << test_case.is_power_of_two
                  << " }";

    // clang-format on
}

/**
 * \brief picolibrary::is_power_of_two<std::uint8_t>() test cases.
 */
isPowerOfTwo_Test_Case<std::uint8_t> const isPowerOfTwo8_TEST_CASES[]{
    // clang-format off

    { 0b00000001, true },
    { 0b00000010, true },
    { 0b00000100, true },
    { 0b00001000, true },
    { 0b00010000, true },
    { 0b00100000, true },
    { 0b01000000, true },
    { 0b10000000, true },

    { 0b00000000, false },
    { 0b11111111, false },

    { 0b10000001, false },
    { 0b01000001, false },
    { 0b00100001, false },
    { 0b00010001, false },
    { 0b00001001, false },
    { 0b00000101, false },

    { 0b00000011, false },

    { 0b00000111, false },
    { 0b00001111, false },
    { 0b00011111, false },
    { 0b00111111, false },
    { 0b01111111, false },

    { 0b00000110, false },

    { 0b00001100, false },
    { 0b00011001, false },
    { 0b00110111, false },
    { 0b01010011, false },
    { 0b11001100, false },

    // clang-format on
};

/**
 * \brief picolibrary::is_power_of_two<std::uint8_t>() test fixture.
 */
class isPowerOfTwo8 : public TestWithParam<isPowerOfTwo_Test_Case<std::uint8_t>> {
};

INSTANTIATE_TEST_SUITE_P( testCases, isPowerOfTwo8, ValuesIn( isPowerOfTwo8_TEST_CASES ) );

/**
 * \brief Verify picolibrary::is_power_of_two<std::uint8_t>() works properly.
 */
TEST_P( isPowerOfTwo8, worksProperly )
{
    auto const test_case = GetParam();

    ASSERT_EQ( is_power_of_two( test_case.value ), test_case.is_power_of_two );
}

/**
 * \brief picolibrary::is_power_of_two<std::uint16_t>() test cases.
 */
isPowerOfTwo_Test_Case<std::uint16_t> const isPowerOfTwo16_TEST_CASES[]{
    // clang-format off

    { 0b0000000000000001, true },
    { 0b0000000000000010, true },
    { 0b0000000000000100, true },
    { 0b0000000000001000, true },
    { 0b0000000000010000, true },
    { 0b0000000000100000, true },
    { 0b0000000001000000, true },
    { 0b0000000010000000, true },
    { 0b0000000100000000, true },
    { 0b0000001000000000, true },
    { 0b0000010000000000, true },
    { 0b0000100000000000, true },
    { 0b0001000000000000, true },
    { 0b0010000000000000, true },
    { 0b0100000000000000, true },
    { 0b1000000000000000, true },

    { 0b0000000000000000, false },
    { 0b1111111111111111, false },

    { 0b1000000000000001, false },
    { 0b0100000000000001, false },
    { 0b0010000000000001, false },
    { 0b0001000000000001, false },
    { 0b0000100000000001, false },
    { 0b0000010000000001, false },
    { 0b0000001000000001, false },
    { 0b0000000100000001, false },
    { 0b0000000010000001, false },
    { 0b0000000001000001, false },
    { 0b0000000000100001, false },
    { 0b0000000000010001, false },
    { 0b0000000000001001, false },
    { 0b0000000000000101, false },

    { 0b0000000000000011, false },

    { 0b0000000000000111, false },
    { 0b0000000000001111, false },
    { 0b0000000000011111, false },
    { 0b0000000000111111, false },
    { 0b0000000001111111, false },
    { 0b0000000011111111, false },
    { 0b0000000111111111, false },
    { 0b0000001111111111, false },
    { 0b0000011111111111, false },
    { 0b0000111111111111, false },
    { 0b0001111111111111, false },
    { 0b0011111111111111, false },
    { 0b0111111111111111, false },

    { 0b0000000000000110, false },

    { 0b0000000000001100, false },
    { 0b0000000000011001, false },
    { 0b0000000000110111, false },
    { 0b0000000001010011, false },
    { 0b0000000011001100, false },
    { 0b0000000100000100, false },
    { 0b0000001100100001, false },
    { 0b0000011011100000, false },
    { 0b0000101011000011, false },
    { 0b0001101110011111, false },
    { 0b0010100111010001, false },
    { 0b0110100001010000, false },
    { 0b1010111110111110, false },

    // clang-format on
};

/**
 * \brief picolibrary::is_power_of_two<std::uint16_t>() test fixture.
 */
class isPowerOfTwo16 : public TestWithParam<isPowerOfTwo_Test_Case<std::uint16_t>> {
};

INSTANTIATE_TEST_SUITE_P( testCases, isPowerOfTwo16, ValuesIn( isPowerOfTwo16_TEST_CASES ) );

/**
 * \brief Verify picolibrary::is_power_of_two<std::uint16_t>() works properly.
 */
TEST_P( isPowerOfTwo16, worksProperly )
{
    auto const test_case = GetParam();

    ASSERT_EQ( is_power_of_two( test_case.value ), test_case.is_power_of_two );
}

/**
 * \brief picolibrary::is_power_of_two<std::uint32_t>() test cases.
 */
isPowerOfTwo_Test_Case<std::uint32_t> const isPowerOfTwo32_TEST_CASES[]{
    // clang-format off

    { 0b00000000000000000000000000000001, true },
    { 0b00000000000000000000000000000010, true },
    { 0b00000000000000000000000000000100, true },
    { 0b00000000000000000000000000001000, true },
    { 0b00000000000000000000000000010000, true },
    { 0b00000000000000000000000000100000, true },
    { 0b00000000000000000000000001000000, true },
    { 0b00000000000000000000000010000000, true },
    { 0b00000000000000000000000100000000, true },
    { 0b00000000000000000000001000000000, true },
    { 0b00000000000000000000010000000000, true },
    { 0b00000000000000000000100000000000, true },
    { 0b00000000000000000001000000000000, true },
    { 0b00000000000000000010000000000000, true },
    { 0b00000000000000000100000000000000, true },
    { 0b00000000000000001000000000000000, true },
    { 0b00000000000000010000000000000000, true },
    { 0b00000000000000100000000000000000, true },
    { 0b00000000000001000000000000000000, true },
    { 0b00000000000010000000000000000000, true },
    { 0b00000000000100000000000000000000, true },
    { 0b00000000001000000000000000000000, true },
    { 0b00000000010000000000000000000000, true },
    { 0b00000000100000000000000000000000, true },
    { 0b00000001000000000000000000000000, true },
    { 0b00000010000000000000000000000000, true },
    { 0b00000100000000000000000000000000, true },
    { 0b00001000000000000000000000000000, true },
    { 0b00010000000000000000000000000000, true },
    { 0b00100000000000000000000000000000, true },
    { 0b01000000000000000000000000000000, true },
    { 0b10000000000000000000000000000000, true },

    { 0b00000000000000000000000000000000, false },
    { 0b11111111111111111111111111111111, false },

    { 0b10000000000000000000000000000001, false },
    { 0b01000000000000000000000000000001, false },
    { 0b00100000000000000000000000000001, false },
    { 0b00010000000000000000000000000001, false },
    { 0b00001000000000000000000000000001, false },
    { 0b00000100000000000000000000000001, false },
    { 0b00000010000000000000000000000001, false },
    { 0b00000001000000000000000000000001, false },
    { 0b00000000100000000000000000000001, false },
    { 0b00000000010000000000000000000001, false },
    { 0b00000000001000000000000000000001, false },
    { 0b00000000000100000000000000000001, false },
    { 0b00000000000010000000000000000001, false },
    { 0b00000000000001000000000000000001, false },
    { 0b00000000000000100000000000000001, false },
    { 0b00000000000000010000000000000001, false },
    { 0b00000000000000001000000000000001, false },
    { 0b00000000000000000100000000000001, false },
    { 0b00000000000000000010000000000001, false },
    { 0b00000000000000000001000000000001, false },
    { 0b00000000000000000000100000000001, false },
    { 0b00000000000000000000010000000001, false },
    { 0b00000000000000000000001000000001, false },
    { 0b00000000000000000000000100000001, false },
    { 0b00000000000000000000000010000001, false },
    { 0b00000000000000000000000001000001, false },
    { 0b00000000000000000000000000100001, false },
    { 0b00000000000000000000000000010001, false },
    { 0b00000000000000000000000000001001, false },
    { 0b00000000000000000000000000000101, false },

    { 0b00000000000000000000000000000011, false },

    { 0b00000000000000000000000000000111, false },
    { 0b00000000000000000000000000001111, false },
    { 0b00000000000000000000000000011111, false },
    { 0b00000000000000000000000000111111, false },
    { 0b00000000000000000000000001111111, false },
    { 0b00000000000000000000000011111111, false },
    { 0b00000000000000000000000111111111, false },
    { 0b00000000000000000000001111111111, false },
    { 0b00000000000000000000011111111111, false },
    { 0b00000000000000000000111111111111, false },
    { 0b00000000000000000001111111111111, false },
    { 0b00000000000000000011111111111111, false },
    { 0b00000000000000000111111111111111, false },
    { 0b00000000000000001111111111111111, false },
    { 0b00000000000000011111111111111111, false },
    { 0b00000000000000111111111111111111, false },
    { 0b00000000000001111111111111111111, false },
    { 0b00000000000011111111111111111111, false },
    { 0b00000000000111111111111111111111, false },
    { 0b00000000001111111111111111111111, false },
    { 0b00000000011111111111111111111111, false },
    { 0b00000000111111111111111111111111, false },
    { 0b00000001111111111111111111111111, false },
    { 0b00000011111111111111111111111111, false },
    { 0b00000111111111111111111111111111, false },
    { 0b00001111111111111111111111111111, false },
    { 0b00011111111111111111111111111111, false },
    { 0b00111111111111111111111111111111, false },
    { 0b01111111111111111111111111111111, false },

    { 0b00000000000000000000000000000110, false },

    { 0b00000000000000000000000000001100, false },
    { 0b00000000000000000000000000011001, false },
    { 0b00000000000000000000000000110111, false },
    { 0b00000000000000000000000001010011, false },
    { 0b00000000000000000000000011001100, false },
    { 0b00000000000000000000000100000100, false },
    { 0b00000000000000000000001100100001, false },
    { 0b00000000000000000000011011100000, false },
    { 0b00000000000000000000101011000011, false },
    { 0b00000000000000000001101110011111, false },
    { 0b00000000000000000010100111010001, false },
    { 0b00000000000000000110100001010000, false },
    { 0b00000000000000001010111110111110, false },
    { 0b00000000000000010011000000100100, false },
    { 0b00000000000000101100000110000001, false },
    { 0b00000000000001111010101010000000, false },
    { 0b00000000000011001100011101010101, false },
    { 0b00000000000110011000110000000010, false },
    { 0b00000000001101111000000100010111, false },
    { 0b00000000010100110111010110001111, false },
    { 0b00000000110011001100001010000001, false },
    { 0b00000001000001000011111101111100, false },
    { 0b00000011001000011001101011000010, false },
    { 0b00000110111000000101010011100101, false },
    { 0b00001010110000111010000000011000, false },
    { 0b00011011100111110100101001101100, false },
    { 0b00101001110100010010010101101000, false },
    { 0b01101000010100001110110110101101, false },
    { 0b10101111101111101000101000001111, false },

    // clang-format on
};

/**
 * \brief picolibrary::is_power_of_two<std::uint32_t>() test fixture.
 */
class isPowerOfTwo32 : public TestWithParam<isPowerOfTwo_Test_Case<std::uint32_t>> {
};

INSTANTIATE_TEST_SUITE_P( testCases, isPowerOfTwo32, ValuesIn( isPowerOfTwo32_TEST_CASES ) );

/**
 * \brief Verify picolibrary::is_power_of_two<std::uint32_t>() works properly.
 */
TEST_P( isPowerOfTwo32, worksProperly )
{
    auto const test_case = GetParam();

    ASSERT_EQ( is_power_of_two( test_case.value ), test_case.is_power_of_two );
}

/**
 * \brief Execute the picolibrary bit manipulation automated tests.
 *
 * \param[in] argc The number of arguments to pass to testing::InitGoogleMock().
 * \param[in] argc The array of arguments to pass to testing::InitGoogleMock().
 *
 * \return See Google Test's RUN_ALL_TESTS().
 */
int main( int argc, char * argv[] )
{
    ::testing::InitGoogleMock( &argc, argv );

    return RUN_ALL_TESTS();
}
