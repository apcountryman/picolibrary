#!/usr/bin/env bash

# picolibrary
#
# Copyright 2020-2021, Andrew Countryman <apcountryman@gmail.com> and the picolibrary
# contributors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# File: ci/build
# Description: picolibrary repository CI build script.

function error()
{
    local -r message="$1"

    ( >&2 echo "$mnemonic: $message" )
}

function abort()
{
    if [[ "$#" -gt 0 ]]; then
        local -r message="$1"

        error "$message, aborting"
    fi

    exit 1
}

function display_help_text()
{
    echo "NAME"
    echo "    $mnemonic - Build picolibrary."
    echo "SYNOPSIS"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --configuration <configuration>"
    echo "OPTIONS"
    echo "    --configuration <configuration"
    echo "        Specify the configuration to build. The following configurations are"
    echo "        supported:"
    echo "            release"
    echo "            testing-interactive"
    echo "            testing-unit"
    echo "    --help"
    echo "        Display this help text."
    echo "    --version"
    echo "        Display the version of this script."
    echo "EXAMPLES"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --configuration release"
    echo "    $mnemonic --configuration testing-interactive"
    echo "    $mnemonic --configuration testing-unit"
}

function display_version()
{
    echo "$mnemonic, version $version"
}

function ensure_no_build_errors_are_present()
{
    local -r build_directory="$repository/build/$configuration"
    local -r build_configuration="$repository/configuration/$configuration/CMakeLists.txt"

    if ! cmake -C "$build_configuration" -S "$repository" -B "$build_directory"; then
        abort
    fi

    if ! cmake --build "$build_directory" -j "$( nproc )"; then
        abort
    fi
}

function main()
{
    local -r script=$( readlink -f "$0" )
    local -r mnemonic=$( basename "$script" )
    local -r repository=$( readlink -f "$( dirname "$script" )/.." )
    local -r version=$( git -C "$repository" describe --match=none --always --dirty --broken )

    while [[ "$#" -gt 0 ]]; do
        local argument="$1"; shift

        case "$argument" in
            --help)
                display_help_text
                exit
                ;;
            --version)
                display_version
                exit
                ;;
            --configuration)
                if [[ -n "$configuration" ]]; then
                    abort "build configuration already specified"
                fi

                if [[ "$#" -le 0 ]]; then
                    abort "build configuration not specified"
                fi

                local -r configuration="$1"; shift

                if [[ "$configuration" != "release" && "$configuration" != "testing-interactive" && "$configuration" != "testing-unit" ]]; then
                    abort "'$configuration' is not a supported build configuration"
                fi
                ;;
            --*)
                ;&
            -*)
                abort "'$argument' is not a supported option"
                ;;
            *)
                abort "'$argument' is not a valid argument"
                ;;
        esac
    done

    if [[ -z "$configuration" ]]; then
        abort "'--configuration' must be specified"
    fi

    ensure_no_build_errors_are_present
}

main "$@"
